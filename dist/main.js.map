{"version":3,"sources":["webpack://wheres-waldo/./src/client_side/all_levels/level_01.js","webpack://wheres-waldo/./src/client_side/all_levels/level_02.js","webpack://wheres-waldo/./src/client_side/all_levels/neededByAllLevels.js","webpack://wheres-waldo/./src/client_side/choose_level/renderLevels.js","webpack://wheres-waldo/./src/client_side/each_game_required_divs/requiredDivs.js","webpack://wheres-waldo/./src/client_side/gamePlay.js","webpack://wheres-waldo/./src/client_side/gamePlayLevelWise/characterSelectionDropDown.js","webpack://wheres-waldo/./src/client_side/gamePlayLevelWise/level_01_gamePlay_control.js","webpack://wheres-waldo/./src/client_side/gamePlayLevelWise/level_02_gamePlay_control.js","webpack://wheres-waldo/./src/client_side/gamePlayLevelWise/requiredByEachLevel.js","webpack://wheres-waldo/./src/server_side/accessingData.js","webpack://wheres-waldo/./src/server_side/level_01/characterPositions.js","webpack://wheres-waldo/./src/server_side/level_01/storingPositions.js","webpack://wheres-waldo/./src/server_side/level_02/characterPositions.js","webpack://wheres-waldo/./src/server_side/level_02/storingPositions.js","webpack://wheres-waldo/webpack/bootstrap","webpack://wheres-waldo/webpack/runtime/define property getters","webpack://wheres-waldo/webpack/runtime/hasOwnProperty shorthand","webpack://wheres-waldo/webpack/runtime/make namespace object","webpack://wheres-waldo/./src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA8F;AACb;AACrB;;AAErD;AACP,IAAI,yEAAqB;AACzB;AACA;AACA;AACA,IAAI,6FAAqB;AACzB;;AAEA;AACA;AACA,IAAI,iFAAc;AAClB,IAAI,iFAAc;AAClB,IAAI,wFAAqB,CAAC,6EAAU;AACpC;;AAEA;AACA,IAAI,oFAAiB;AACrB,IAAI,oFAAiB;AACrB;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,C;;;;;;;;;;;;;;;;;AClC8F;AACb;AACtB;;AAEpD;AACP,IAAI,yEAAqB;AACzB;AACA;AACA;AACA,IAAI,6FAAqB;AACzB;;AAEA;AACA;AACA,IAAI,iFAAc;AAClB,IAAI,iFAAc;AAClB,IAAI,wFAAqB,CAAC,6EAAU;AACpC;;AAEA;AACA,IAAI,oFAAiB;AACrB,IAAI,oFAAiB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,C;;;;;;;;;;;;;;;AC9BgG;;AAEhG;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,oFAAiB;AACrB,IAAI,oFAAiB;AACrB;;AAEA;AACA,IAAI,oFAAiB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI,4FAAyB;AAC7B;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;;ACpC6D;AACA;AACe;;AAErE;AACP,IAAI,4FAAyB;AAC7B,IAAI,4FAAyB;AAC7B;;AAEA;AACA;AACA;AACA,QAAQ,yEAAmB;AAC3B,KAAK;AACL,QAAQ,yEAAmB;AAC3B;AACA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBoF;AACqC;AACjB;AACA;AACA;AACjG;AACA;AACP;AACA;AACA,IAAI,8FAA2B;AAC/B,IAAI,+FAA4B;AAChC;AACA,IAAI,kFAAU;AACd;;AAEO;AACP,mBAAmB,kFAAe;AAClC,kBAAkB,kFAAe;AACjC;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP,IAAI,gFAAmB;AACvB;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,uFAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,0FAAuB;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,sIAAmE;AAC3E,KAAK;AACL;AACA;;AAEA,QAAQ,sIAAmE;AAC3E;AACA;AACA;;AAEA;AACO;;AAEA;AACP,OAAO,yFAAsB;AAC7B,QAAQ,yGAAiC;AACzC;AACA;AACA;;AAEO;AACP;AACA;;AAEA,0BAA0B,iFAAc;AACxC;AACA;;AAEA;AACA,QAAQ,qHAAuC;AAC/C,KAAK;AACL,QAAQ,qHAAuC;AAC/C;AACA;AACA,C;;;;;;;;;;;;;;;;;;;;;;ACtGqE;;AAErE;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP,mBAAmB,mGAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,mBAAmB,mGAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,mBAAmB,mGAAgC;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,C;;;;;;;;;;;;;;;;;;ACjHwH;AAC9B;AACmC;AACtH;;AAEP;AACA,IAAI,+FAAmC;AACvC;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,QAAQ,iFAA2B;;AAEnC;AACA;AACA,4BAA4B,+EAAyB;AACrD,YAAY,kFAA4B;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP,mBAAmB,yEAAY;AAC/B,IAAI,yFAA4B;;AAEhC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,C;;;;;;;;;;;;;;;;;;AC5CwH;AACwC;AACnC;AACtH;;AAEP;AACA;AACA;AACA;AACA,QAAQ,iFAA2B;;AAEnC;AACA;AACA,4BAA4B,+EAAyB;AACrD,YAAY,kFAA4B;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,IAAI,gGAAmC;AACvC;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,wBAAwB,4FAAgC;AACxD;AACA;;AAEA;AACA;AACA;;AAEO;AACP,mBAAmB,yEAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yEAAY;AAC1B;AACA,IAAI,yFAA4B;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,C;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DmI;AAC3D;AACyE;AAC/D;;AAElF;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA,IAAI,iEAAsB;AAC1B,IAAI,sEAA2B;AAC/B;;AAEA;AACA,eAAe,uFAAoB;AACnC;AACA;AACA,KAAK;AACL;;AAEA;AACA,eAAe,uFAAoB;AACnC;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,IAAI,6FAA0B;AAC9B;;AAEA;AACA,IAAI,qFAAqB;AACzB;;AAEA;AACA,IAAI,0FAAuB;AAC3B;AACA;;AAEA;AACA,IAAI,0FAAuB;AAC3B,IAAI,yFAAsB;AAC1B;;AAEA;AACA;AACA,IAAI,iFAAoB;AACxB;;AAEO;AACP;AACA;AACA;;AAEO;AACP,IAAI,0FAAuB;AAC3B,IAAI,4FAAyB;AAC7B;;AAEO;AACP,IAAI,6FAA0B;AAC9B,IAAI,+FAA4B;AAChC;;AAEO;AACP,IAAI,gGAA6B;AACjC;;AAEO;AACP,IAAI,mGAAgC;AACpC;;AAEO;AACP,IAAI,4FAAyB;AAC7B,C;;;;;;;;;;;;;;;;;;;;;;;ACtHA;AACkD;AACA;;AAE3C;AACP;AACA,sDAAsD,WAAW;AACjE;;AAEO;AACP;AACA;AACA;AACA,UAAU,uBAAuB;AACjC;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP,WAAW,0DAAI;AACf;;AAEO;AACA;AACA;AACP,yBAAyB;;AAEzB,uBAAuB,SAAS;AAChC,sBAAsB,UAAU;AAChC,mBAAmB;AACnB,C;;;;;;;;;;;;;;;;;;;AC9DA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;ACPgE;AACsE;;AAEtI;AACA,IAAI,4EAA4B,EAAE,+DAAc,EAAE,+DAAc;AAChE;;AAEA;AACA,IAAI,6EAA4B,EAAE,+DAAc,EAAE,+DAAc;AAChE;;AAEA;AACA,IAAI,6EAA4B,EAAE,+DAAc,EAAE,+DAAc;AAChE;;AAEO;AACP;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACnBA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;ACJA,WAAW,+BAA+B;AACsB;AACM;;AAEtE;AACA,IAAI,4EAA4B,EAAE,+DAAc,EAAE,+DAAc;AAChE;;AAEO;AACP;AACA,C;;;;;;;;;;;;;;;;UCVA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;;ACNgF;AAC9B;AAC4B;AACM;AACpF,WAAW,sBAAsB;AACjC,WAAW,iDAAiD;;;AAG5D,+DAAQ;AACR,2FAAmB;AACnB,iGAAyB;AACzB;AACA,6FAAqB,G","file":"main.js","sourcesContent":["import { gamePanel, level, levelImage, timer } from \"../each_game_required_divs/requiredDivs\";\nimport { show_hideOrShowButton } from \"../gamePlayLevelWise/requiredByEachLevel\";\nimport { necessaryCleanUpTasks } from \"./neededByAllLevels\";\n\nexport let level_one_game_view = () => {\n    necessaryCleanUpTasks();\n    renderingLevelAndTimer('01', '02-00-00');\n    renderCharactersOnDisplay();\n    renderingLevelWorldImage();\n    show_hideOrShowButton();\n}\n\nlet renderingLevelWorldImage = () => {\n    // levelImage.src = '../../../dist/images/level-1.jpg' || './images/level-1.jpg';\n    levelImage.src = './images/level-1.jpg';\n    levelImage.alt = 'level 01';\n    gamePanel.appendChild(levelImage);\n}\n\nlet renderingLevelAndTimer = (levelNum, levelTimer) => {\n    level.textContent = levelNum;\n    timer.textContent = levelTimer;\n}\n\nlet renderCharactersOnDisplay = () => {\n    document.querySelectorAll('.characters-display img').forEach(node => {\n        if(node.id == 'waldo') {\n            node.style.display = 'block';\n        } else if(node.id == 'odlaw') {\n            node.style.display = 'block';\n        } else if(node.id == 'wizard') {\n            node.style.display = 'block';\n        }\n    })\n}","import { gamePanel, level, levelImage, timer } from \"../each_game_required_divs/requiredDivs\";\nimport { show_hideOrShowButton } from \"../gamePlayLevelWise/requiredByEachLevel\";\nimport { necessaryCleanUpTasks } from \"./neededByAllLevels\"\n\nexport let level_two_game_view = () => {\n    necessaryCleanUpTasks();\n    renderingLevelAndTimer('02', '01-40-00');\n    renderCharactersOnDisplay();\n    renderingLevelWorldImage();\n    show_hideOrShowButton();\n}\n\nlet renderingLevelWorldImage = () => {\n    // levelImage.src = '../../../dist/images/level-2.png' || './images/level-2.png';\n    levelImage.src = './images/level-2.png';\n    levelImage.alt = 'level 02';\n    gamePanel.appendChild(levelImage);\n}\n\nlet renderingLevelAndTimer = (levelNum, levelTimer) => {\n    level.textContent = levelNum;\n    timer.textContent = levelTimer;\n}\n\nlet renderCharactersOnDisplay = () => {\n    document.querySelectorAll('.characters-display img').forEach(node => {\n        if(node.id == 'waldo') {\n            node.style.display = 'block';\n        }\n    });\n}","import { level, levelImage, timer, toggle_text } from \"../each_game_required_divs/requiredDivs\";\n\n// let renderingLevelWorldImage = (src, alt) => {\n//     levelImage.src = src;\n//     levelImage.alt = alt;\n//     gamePanel.appendChild(levelImage);\n// }\n\nlet removingLevelAndTimer = () => {\n    level.textContent = '';\n    timer.textContent = '';\n}\n\nlet removingLevelWorldImage = () => {\n    levelImage.remove();\n}\n\nlet removeCharactersFromDisplay = () => {\n    document.querySelectorAll('.characters-display img').forEach(node=> node.style.display = 'none');\n}\n\nlet removeOpacityFreomCharcters = () => {\n    document.querySelectorAll('.characters-display img').forEach(node=> node.classList.remove('character-found'));\n    // document.querySelectorAll('.characters-display img').forEach(node=> node.classList.contains('character-found') ? node.classList.remove('character-found') : false);\n}\n\nlet hide_showOrHideButton = () => {\n    toggle_text.style.display = 'none';\n}\n\nexport let necessaryCleanUpTasks = () => {\n    removingLevelWorldImage();\n    removingLevelAndTimer();\n    removeCharactersFromDisplay();\n    removeOpacityFreomCharcters();\n    hide_showOrHideButton();\n}","import { level_one_game_view } from \"../all_levels/level_01\";\nimport { level_two_game_view } from \"../all_levels/level_02\";\nimport { level_01, level_02 } from \"../each_game_required_divs/requiredDivs\"\n\nexport let awaitsUserChooseLevel = () => {\n    level_01.addEventListener('click',userHasSelectedLevel);\n    level_02.addEventListener('click', userHasSelectedLevel);\n}\n\nlet userHasSelectedLevel = evt => {\n    let id = evt.target.id;\n    if(id == 'level-01') {\n        level_one_game_view();\n    } else if(id == 'level-02') {\n        level_two_game_view();\n    }\n}","let waldo = document.querySelector('#waldo');\nlet odlaw = document.querySelector('#odlaw');\nlet wizard = document.querySelector('#wizard');\nlet wilma = document.querySelector('#wilma');\nlet wenda = document.querySelector('#wenda');\n\nlet level = document.querySelector('#level');\nlet timer = document.querySelector('#timer');\nlet levelImage = document.querySelector('#level-image');\nlet gamePanel = document.querySelector('.game-panel');\n\nlet level_01 = document.querySelector('#level-01');\nlet level_02 = document.querySelector('#level-02');\n\nlet resultText = document.querySelector('.result-text');\nlet resultDiv = document.querySelector('.level-result');\nlet playAgain = document.querySelector('#play-again');\nlet toggle_text = document.querySelector('#toggle-text');\nlet charactersDisplayed = document.querySelector('.characters-display');\nlet highScores = document.querySelector('.high-scores');\n\nlet chooseLevel = document.querySelector('.choose-levels');\nlet headerDiv = document.querySelector('.levels-header');\nlet scoresContainer = document.querySelector('.keeping-scores');\nlet scoresText = document.querySelector('.scores');\nexport {waldo, odlaw, wizard, wilma, wenda, level, timer, levelImage, gamePanel, level_01, level_02, resultDiv, resultText, playAgain, toggle_text, charactersDisplayed, highScores, chooseLevel, headerDiv, scoresContainer, scoresText}","import { readEachLevelResult, test2, testData } from \"../server_side/accessingData\";\nimport { charactersDisplayed, highScores, level, levelImage, toggle_text } from \"./each_game_required_divs/requiredDivs\";\nimport { checkPositionWithFirebaseForGameLevel01 } from \"./gamePlayLevelWise/level_01_gamePlay_control\";\nimport { checkPositionWithFirebaseForGameLevel02 } from \"./gamePlayLevelWise/level_02_gamePlay_control\";\nimport { hideScores, movingDivsFromDisplayToShowScores } from \"./gamePlayLevelWise/requiredByEachLevel\";\nexport let results = {};\nexport let gamePlay = () => {\n    let worldImage = document.querySelector('.game-panel');\n    // worldImage.addEventListener('click', checkWhichLevelIsInPlay);\n    levelImage.addEventListener('click', checkWhichLevelIsInPlay);\n    toggle_text.addEventListener('click', toggleTextInDisplay);\n    initialToogleTextDisplay();\n    hideScores();\n}\n\nexport let removePreviousScoresDetails = () => {\n    for(let idx in highScores.rows) {\n        let row = highScores.rows[idx];\n        if(idx >=1) {\n            row.remove();\n        }\n    }\n}\n\nexport let showLevelHighestScores = (level, name) => {\n    // removing previously placed data from DOM\n    removePreviousScoresDetails();\n\n    // re rendering table data\n    // setTimeout(()=>showDataInHighScoresTable(level, name), 2000);\n    setTimeout(()=>showDataOnTable(level, name), 1001);\n}\n\nexport let showDataOnTable = (level, name) => {\n    readEachLevelResult(level,  name).then(data=> {\n        bringOutMaxFourFromResults(data);\n    })\n}\n\nlet bringOutMaxFourFromResults = data=> {\n    let maxFour = Object.entries(data).sort(([a,b], [c,d]) => b.time - d.time ).slice(0,4);\n    let sortedFour = maxFour.sort(([,a],[,b])=>b.time-a.time);\n    addingDatasOntoTable(Object.fromEntries(sortedFour));\n}\n\nlet addingDatasOntoTable = (datas) => {\n    // console.log('results', datas);\n    for(let key in datas) {\n        let row = highScores.insertRow(1);\n        let nameCell = row.insertCell(0);\n        let timeCell = row.insertCell(1);\n        let starsCell = row.insertCell(2);\n        nameCell.innerHTML = key;\n        timeCell.innerHTML = (datas[key].time.toFixed(2))+' sec';\n        starsCell.innerHTML = datas[key].stars;\n    }\n}\n\nlet initialToogleTextDisplay = () => {\n    toggle_text.textContent = \"Hide Characters\";\n}\n\nlet toggleTextInDisplay = evt => {\n    if(evt.target.classList.contains('show')) {\n        evt.target.parentNode.style.marginLeft = '0%';\n        evt.target.textContent = \"Hide Characters\";\n\n        evt.target.classList.remove('show');\n        charactersDisplayed.parentNode.firstChild.nextSibling.style.display = 'flex';\n    } else {\n        evt.target.classList.add('show');\n        evt.target.textContent = \"Show Characters\";\n\n        charactersDisplayed.parentNode.firstChild.nextSibling.style.display = 'none';\n        evt.target.parentNode.style.marginLeft = '92%';\n    }\n}\n\nlet flag = 0;\nexport let  refreshingFlag = () => flag = 0;\n\nexport let checkAndShowResults = (level) => {\n    if(levelImage.textContent) {\n        movingDivsFromDisplayToShowScores(level);\n        flag = 1;\n    }\n}\n\nexport let checkWhichLevelIsInPlay = evt => {\n    let x = evt.clientX;\n    let y = evt.clientY;\n\n    let imageAltTagText = levelImage.alt;\n    let levelID = imageAltTagText.split(' ')[1];\n    console.log(levelID);\n\n    if(levelID == '01') {\n        checkPositionWithFirebaseForGameLevel01([x,y]);\n    } else if(levelID == '02') {\n        checkPositionWithFirebaseForGameLevel02([x,y]);\n        // checkPositionWithFirebaseForGameLevel02([x,y], evt);\n    }\n}","import { levelImage } from \"../each_game_required_divs/requiredDivs\";\n\nlet value = '';\nexport let  charactersDD = () => {\n    let dropDownMarkUp = document.createElement('select');\n    let option = document.createElement('option');\n    option.value=null;\n    option.text='choose';\n    dropDownMarkUp.append(option);\n    let charactersAreInDisplay = document.querySelector('.characters-display').children;\n    Array.from(charactersAreInDisplay).forEach(character => {\n        let option = document.createElement('option');\n        // console.log(character)\n        if(character.style.display != 'none') {\n            option.value = character.alt;\n            option.textContent = character.alt;\n            dropDownMarkUp.append(option);\n        }\n    });\n    dropDownMarkUp.classList.add('found-who')\n    return dropDownMarkUp;\n}\n\nexport let stickDropDownWhereItsClicked = (dropDown, coords) => {\n    dropDown.setAttribute('style', 'color: green');\n    dropDown.style.left = coords[0]+'px';\n    dropDown.style.top = coords[1]+'px';\n    dropDown.style.position = 'absolute';\n    if(dropDown.length > 1) document.querySelector('.game-panel').append(dropDown);\n    // if(dropDown.length > 1) levelImage.append(dropDown);\n    \n    // stickItVer02();\n}\n\nexport let stickItVer06 = (coords) => {\n    let elemRect = levelImage.getBoundingClientRect();\n    let left = elemRect.left;\n    let top = elemRect.top;\n    console.log(left, top, 'stick it', window.scrollX, window.scrollY, coords[0]-left, coords[1]-top)\n    // return {\n    //     left, top\n    // }\n    return {\n        left: coords[0]-left,\n        top: coords[1]-top\n    }\n}\n\nexport let stickItVer05 = () => {\n    let elemRect = levelImage.getBoundingClientRect();\n    let scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n    let scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n    return {\n        top: elemRect.top + scrollTop,\n        left: elemRect.left + scrollLeft\n    }\n}\n\n\nexport let stickItVer04 = evt => {\n    return {\n        top: evt.pageY,\n        left: evt.pageX\n    }\n}\n\nexport let stickItVer03 = (coords) => {\n    let pos = stickItVer02();\n    let left = pos.left;\n    let top = pos.top;\n    console.log(left-coords[0], top-coords[1], coords[0]-left, coords[1]-top);\n    return {\n        left: coords[0]-left,\n        top: top-coords[1]\n    }\n}\n\nexport let stickItVer02 = () => {\n    let bodyRect = document.body.getBoundingClientRect();\n    let elemRect = levelImage.getBoundingClientRect();\n    // console.log(bodyRect, elemRect)\n    return {\n        left: elemRect.left + window.scrollX,\n        top: elemRect.top + window.scrollY\n    }\n\n    // let topOffset = elemRect.top - bodyRect.top\n    // let leftOffset = elemRect.left - bodyRect.left;\n    // let rightOffset =  elemRect.right - bodyRect.right;\n    // let bottomOffset =  elemRect.bottom - bodyRect.bottom;\n    // console.log(topOffset, leftOffset, rightOffset, bottomOffset);\n    // console.log(elemRect.scrollLeft, elemRect.scrollTop);\n    // console.log(elemRect.left + window.scrollX, elemRect.top + window.scrollY)\n\n    // let crdsTop = levelImage.offsetTop;\n    // let crdsLeft = levelImage.offsetLeft;\n    // let crdsRight = levelImage.offsetRight;\n    // let crdsBottom = levelImage.offsetBottom;\n\n    // let crdsTop = levelImage.scrollTop;\n    // let crdsLeft = levelImage.scollLeft;\n    // let crdsRight = levelImage.scollRight;\n    // let crdsBottom = levelImage.scollBottom;\n    // console.log(crdsTop,crdsLeft, crdsRight, crdsBottom);\n}\n\nexport let whichOptionWasSelected = () => {\n    let select = document.querySelector('.found-who');\n    select.addEventListener('change', (evt)=> {\n        value = select.value;\n        select.remove();\n        return value;\n    });\n}","import { readCharacterCoordsDataFromArray, readCharacterCoordsDataFromFirebase } from \"../../server_side/accessingData\";\nimport { charactersDD, stickDropDownWhereItsClicked } from \"./characterSelectionDropDown\";\nimport { calculateTotalTimeElapsed, decideEffeciencyFindingWaldo, disableCharacterFromDisplay } from \"./requiredByEachLevel\";\nexport let howManyCharactersExistInLevelOne = 3;\n\nlet checkWhoWithFirebase = (collectionName, characterName, coords) => {\n    readCharacterCoordsDataFromFirebase(collectionName, characterName).then(data=>{\n        // console.log(data, 'data read!!');\n        let characterData = data;\n        checkIfCoordsWithinPositionRange(characterData, coords, characterName);\n    }).catch(err=>console.log(\"could not read data!!\", err));\n}\n\nlet checkIfCoordsWithinPositionRange = (data, coords, who) => {\n    console.log(data['X'][0], data.X[1], who);\n    if((coords[0] >= data['X'][0] && coords[0] <= data['X'][1]) && (coords[1] >= data['Y'][0] && coords[1] <= data['Y'][1])) {\n        console.log('found!!'+who, data['X'][0], data['X'][1]);\n        disableCharacterFromDisplay(who)\n\n        howManyCharactersExistInLevelOne--;\n        if(howManyCharactersExistInLevelOne == 0) {\n            let timeSpent = calculateTotalTimeElapsed();\n            decideEffeciencyFindingWaldo(timeSpent, 'level_01');\n            // moving it back to it's initial value, so that when play again is in motion it starts from initial count\n            howManyCharactersExistInLevelOne = 3;\n        }\n    } else {\n        console.log('go fish!!'+who, coords);\n    }\n}\n\nexport let checkPositionWithFirebaseForGameLevel01 = (coords) => {\n    let dropDown = charactersDD();\n    stickDropDownWhereItsClicked(dropDown, coords);\n\n    let select = document.querySelector('.found-who');\n\n    if(select) {\n        select.addEventListener('change', ()=>{\n            let who = select.value;\n            checkWhoWithFirebase('level_01', who, coords);\n            document.querySelectorAll('select').forEach(node=>node.parentNode.removeChild(node));\n        });\n    }\n}","import { readCharacterCoordsDataFromArray, readCharacterCoordsDataFromFirebase } from \"../../server_side/accessingData\";\nimport { charactersDD, stickDropDownWhereItsClicked, stickItVer02, stickItVer03, stickItVer04, stickItVer05, stickItVer06 } from \"./characterSelectionDropDown\";\nimport { calculateTotalTimeElapsed, decideEffeciencyFindingWaldo, disableCharacterFromDisplay } from \"./requiredByEachLevel\";\nexport let howManyCharactersExistInLevelTwo = 1;\n\nlet checkIfCoordsWithinPositionRange = (data, coords, who) => {\n    console.log(data['X'][0], data.X[1], who);\n    if((coords[0] >= data['X'][0] && coords[0] <= data['X'][1]) && (coords[1] >= data['Y'][0] && coords[1] <= data['Y'][1])) {\n        console.log('found!!'+who, data['X'][0], data['X'][1]);\n        disableCharacterFromDisplay(who);\n\n        howManyCharactersExistInLevelTwo--;\n        if(howManyCharactersExistInLevelTwo == 0) {\n            let timeSpent = calculateTotalTimeElapsed();\n            decideEffeciencyFindingWaldo(timeSpent, \"level_02\");\n            // moving it back to it's initial value, so that when play again is in motion it starts from initial count\n            howManyCharactersExistInLevelTwo = 1;\n        }\n    } else {\n        console.log('go fish!!'+who, coords);\n    }\n}\n\nlet checkWhoWithFirebase = (collectionName, characterName, coords) => {\n    readCharacterCoordsDataFromFirebase(collectionName, characterName).then(data=>{\n        console.log(data, 'data read!!');\n        let characterData = data;\n        checkIfCoordsWithinPositionRange(characterData, coords, characterName);\n    }).catch(err=>console.log(\"could not read data!!\", err));\n}\n\nlet checkWho = (coords, who, level) => {\n    let characterData = readCharacterCoordsDataFromArray()[level][who];\n    checkIfCoordsWithinPositionRange(characterData, coords, who);\n}\n\nlet checkWhoVer02 = (coords, who, level) => {\n    checkWhoWithFirebase(level, who, coords);\n}\n\nexport let checkPositionWithFirebaseForGameLevel02 = (coords) => {\n    let dropDown = charactersDD();\n    // let getPostions = stickItVer02();\n    // let newCoords = [getPostions.left, getPostions.top]\n    // console.log(newCoords, \"new\", coords, 'old');\n    // let pos = stickItVer03(coords);\n    // let pos = stickItVer04(evt);\n    // let pos = stickItVer05(coords);\n    let pos = stickItVer06(coords);\n    let newCoords = [pos.left, pos.top];\n    stickDropDownWhereItsClicked(dropDown, newCoords);\n    // stickDropDownWhereItsClicked(dropDown, coords);\n    // stickDropDownWhereItsClicked(dropDown, newCoords);\n    \n    let select = document.querySelector('.found-who');\n    if(select) {\n        select.addEventListener('change', ()=>{\n            let who = select.value;\n            checkWhoWithFirebase('level_02', who, coords);\n            document.querySelectorAll('select').forEach(node=>node.parentNode.removeChild(node));\n        });\n    }\n}","import { readCharacterCoordsDataFromFirebase, storeEachLevelResult, storeResultsInLocally } from \"../../server_side/accessingData\";\nimport { necessaryCleanUpTasks } from \"../all_levels/neededByAllLevels\";\nimport { chooseLevel, headerDiv, playAgain, resultDiv, resultText, scoresContainer, toggle_text } from \"../each_game_required_divs/requiredDivs\";\nimport { removePreviousScoresDetails, showLevelHighestScores } from \"../gamePlay\";\n\nlet timeStarted = Date.now();\n\nexport let calculateTotalTimeElapsed = () => {\n    let timeElapsed = Date.now() - timeStarted;\n    let seconds = Math.floor(timeElapsed/1000);\n    let minutes = seconds / 60;\n    console.log(timeElapsed, Math.floor(timeElapsed/1000), minutes)\n    return minutes;\n}\n\nexport let decideEffeciencyFindingWaldo = (timeTook, level) => {\n    let stars;\n    if(timeTook < .50) {\n        stars = '5 star';\n    } else if(timeTook >= .50 && timeTook < 1) {\n        stars = '4 star';\n    } else if(timeTook >= 1 && timeTook < 1.25) {\n        stars = '3 star';\n    } else {\n        stars = '2 star';\n    }\n    whatHappensAfterGame(stars, timeTook, level);\n}\n\nexport let movingDivsFromDisplayToShowScores = (level, name) => {\n    showScores();\n    moveLevelsAndHeaderDivsToLeft();\n\n    showLevelHighestScores(level, name);\n    removePreviousScoresDetails();\n}\n\nlet makingLevelsImagesUnclickable = () => {\n    Array.from(chooseLevel.children).forEach(node=>{\n        node.classList.add('unclickable');\n        node.classList.remove('clickable');\n    });\n}\n\nlet makingLevelsImagesClickable = () => {\n    Array.from(chooseLevel.children).forEach(node=>{\n        node.classList.remove('unclickable');\n        node.classList.add('clickable');\n    });\n}\n\nlet movingDivsFromDisplayToHideScores = () => {\n    hideScores();\n    moveLevelsAndHeaderDivsToCenter();\n}\n\nlet whatHappensAfterGame = (stars, time, level) => {\n    let name = prompt('please enter your name for leaderboard');\n\n    storeResultToFirebase(time,name,stars, level);\n\n    movingDivsFromDisplayToShowScores(level, name);\n\n    setTimeout(() => {\n        makingLevelsImagesUnclickable();\n        announceCompleted(stars, name);\n        awaitsUsersPlayAgain();\n    }, 1001);\n}\n\nlet awaitsUsersPlayAgain = () => {\n    playAgain.addEventListener('click', gettingReadyForGame);\n}\n\nlet gettingReadyForGame = evt => {\n    necessaryCleanUpTasks();\n    movingDivsFromDisplayToHideScores();\n\n    document.querySelectorAll('select').forEach(node=>node.parentNode.removeChild(node));\n    resultDiv.style.display = 'none';\n    makingLevelsImagesClickable();\n}\n\nlet announceCompleted = (stars, name) => {\n    resultDiv.style.display = 'block';\n    resultText.textContent = 'congratulations!! '+name+' you got '+stars+' :)';\n}\n\nlet storeResultToFirebase = (completionTime, name, stars, level) => {\n    // storeResultsInLocally(completionTime,name,stars, level);\n    storeEachLevelResult(completionTime, name, level, stars);\n}\n\nexport let disableCharacterFromDisplay = who => {\n    let charactersDisplayed = document.querySelector('.characters-display').children;\n    Array.from(charactersDisplayed).forEach(character => character.id == who ? character.classList.add('character-found') : false)\n}\n\nexport let moveLevelsAndHeaderDivsToLeft = () => {\n    headerDiv.classList.add('move-left');\n    chooseLevel.classList.add('move-left');\n}\n\nexport let moveLevelsAndHeaderDivsToCenter = () => {\n    headerDiv.classList.remove('move-left');\n    chooseLevel.classList.remove('move-left');\n}\n\nexport let hideScores = () => {\n    scoresContainer.classList.add('scores-hidden');\n}\n\nexport let showScores = () => {\n    scoresContainer.classList.remove('scores-hidden');\n}\n\nexport let show_hideOrShowButton = () => {\n    toggle_text.style.display = 'block';\n}","let db = firebase.firestore();\nimport { results } from \"../client_side/gamePlay\";\nimport data from \"./locallyStoredCoordsData.json\";\n\nexport let storeCharacterIntoFirestrore = (characterPos, whichLevel, characterName) => {\n    let [x,y] = [...characterPos];\n    db.collection(whichLevel).doc(characterName).set({X: x, Y: y}).then(()=>console.log(characterName+' coords details saved!!')).catch(err=>console.log(\"something's wrong!!\", err));\n}\n\nexport let storeEachLevelResult = (time, name, level, stars) => {\n    db\n    .collection('results').doc(level)\n    .collection('results').doc(name)\n    .set({stars:stars, time:time})\n    .then(()=> console.log('result stored!!'))\n    .catch(err => console.log(\"error while storing result!!\", err));\n}\n\nexport let readEachLevelResult = (docName, whichCharacter) => {\n    let datas = {};\n    return db\n    .collection('results').doc(docName)\n    .collection('results')\n    .get().then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n            datas[doc.id] = doc.data();\n            // return doc.data(); \n        });\n        // console.log(datas, \"results?!\")\n        return datas;\n    }).then(data=>{\n        console.log(data, 'results');\n        // results = data;\n        return data;\n    }).catch(err => console.log('error!!', err));\n    // return datas;\n}\n\nexport let readCharacterCoordsDataFromFirebase = (collectionName, docName) => {\n    let coordsRanges = {}\n    return db.collection(collectionName).doc(docName)\n    .get().then(doc => {\n        coordsRanges.X = doc.data().X;\n        coordsRanges.Y = doc.data().Y;\n        // console.log('data loaded', doc.data(), doc.data().X, coordsRanges);\n        console.log('data loaded');\n        return coordsRanges;\n    }).catch(err => console.log(\"data couldn't be loaded!!\", err));\n}\n\nexport let readCharacterCoordsDataFromArray = (collectionName, docName) => {\n    return data;\n}\n\nexport let testData = {}\nexport let test2 = {};\nexport let storeResultsInLocally = (time,name,stars, level) => {\n    // testData[name] = {time, stars, level}\n\n    // test2[level] = {[name]: {time, stars}}\n    // test2[name] = {[level]: {time, stars}}\n    test2[name] = {time, stars, level}\n}","let waldosRangeOfX = [200, 204];\nlet waldosRangeOfY = [234, 244];\n\nlet wizardRangeOfX = [234, 238];\nlet wizardRangeOfY = [240, 251];\n\nlet odlawsRangeOfX = [99, 103];\nlet odlawsRangeOfY = [235, 246];\n\nexport {waldosRangeOfX, waldosRangeOfY, odlawsRangeOfX, odlawsRangeOfY, wizardRangeOfX, wizardRangeOfY}","import { storeCharacterIntoFirestrore } from \"../accessingData\";\nimport { odlawsRangeOfX, odlawsRangeOfY, waldosRangeOfX, waldosRangeOfY, wizardRangeOfX, wizardRangeOfY } from \"./characterPositions\";\n\nlet waldosPosition = () => {\n    storeCharacterIntoFirestrore([waldosRangeOfX, waldosRangeOfY], 'level_01', 'waldo');\n}\n\nlet odlawsPosition = () => {\n    storeCharacterIntoFirestrore([odlawsRangeOfX, odlawsRangeOfY], 'level_01', 'odlaw');\n}\n\nlet wizardsPosition = () => {\n    storeCharacterIntoFirestrore([wizardRangeOfX, wizardRangeOfY], 'level_01', 'wizard');\n}\n\nexport let coords_for_level_01 = () => {\n    waldosPosition();\n    odlawsPosition();\n    wizardsPosition();\n}","// let waldosRangeOfX = [383, 387];\n// let waldosRangeOfY = [33, 42];\n\nlet waldosRangeOfX = [186, 189];\nlet waldosRangeOfY = [203, 209];\n\nexport {waldosRangeOfX, waldosRangeOfY}","// import { storeCharacterIntoFirestrore } from \"../accessingData\";\nimport { storeCharacterIntoFirestrore } from \"../accessingData\";\nimport { waldosRangeOfX, waldosRangeOfY } from \"./characterPositions\";\n\nlet waldosPosition = (level) => {\n    storeCharacterIntoFirestrore([waldosRangeOfX, waldosRangeOfY], level, 'waldo');\n}\n\nexport let saving_coords_for_level02 = () => {\n    waldosPosition('level_02');\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { awaitsUserChooseLevel } from \"./client_side/choose_level/renderLevels\";\nimport { gamePlay } from \"./client_side/gamePlay\";\nimport { coords_for_level_01 } from \"./server_side/level_01/storingPositions\";\nimport { saving_coords_for_level02 } from \"./server_side/level_02/storingPositions\";\n// import { coords_for_level_01 } from \"./server_side/savingPositions\";\n// import { coords_for_level_02, saving_coords_for_level02 } from \"./server_side/storingDataByLevels\";\n\n\ngamePlay();\ncoords_for_level_01();\nsaving_coords_for_level02();\n// coords_for_level_02();\nawaitsUserChooseLevel();"],"sourceRoot":""}