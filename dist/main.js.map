{"version":3,"sources":["webpack://wheres-waldo/./src/client_side/all_levels/level_01.js","webpack://wheres-waldo/./src/client_side/all_levels/level_02.js","webpack://wheres-waldo/./src/client_side/all_levels/neededByAllLevels.js","webpack://wheres-waldo/./src/client_side/choose_level/renderLevels.js","webpack://wheres-waldo/./src/client_side/each_game_required_divs/requiredDivs.js","webpack://wheres-waldo/./src/client_side/gamePlay.js","webpack://wheres-waldo/./src/client_side/gamePlayLevelWise/characterSelectionDropDown.js","webpack://wheres-waldo/./src/client_side/gamePlayLevelWise/level_01_gamePlay_control.js","webpack://wheres-waldo/./src/client_side/gamePlayLevelWise/level_02_gamePlay_control.js","webpack://wheres-waldo/./src/client_side/gamePlayLevelWise/requiredByEachLevel.js","webpack://wheres-waldo/./src/server_side/accessingData.js","webpack://wheres-waldo/./src/server_side/level_01/characterPositions.js","webpack://wheres-waldo/./src/server_side/level_01/storingPositions.js","webpack://wheres-waldo/./src/server_side/level_02/characterPositions.js","webpack://wheres-waldo/./src/server_side/level_02/storingPositions.js","webpack://wheres-waldo/webpack/bootstrap","webpack://wheres-waldo/webpack/runtime/define property getters","webpack://wheres-waldo/webpack/runtime/hasOwnProperty shorthand","webpack://wheres-waldo/webpack/runtime/make namespace object","webpack://wheres-waldo/./src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAkF;AACY;AACG;AACrC;;AAErD;AACP;AACA,IAAI,yEAAqB;AACzB;AACA;AACA;AACA,IAAI,6FAAqB;AACzB,IAAI,2FAAmB;AACvB;;AAEA;AACA;AACA,IAAI,iFAAc;AAClB,IAAI,iFAAc;AAClB,IAAI,wFAAqB,CAAC,6EAAU;AACpC;;AAEA;AACA,IAAI,oFAAiB;AACrB,IAAI,oFAAiB;AACrB,IAAI,sFAAc;AAClB;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,C;;;;;;;;;;;;;;;;;;ACtCwF;AACM;AACG;AACtC;;AAEpD;AACP;AACA,IAAI,yEAAqB;AACzB;AACA;AACA;AACA,IAAI,6FAAqB;AACzB,IAAI,iGAAyB;AAC7B;;AAEA;AACA;AACA,IAAI,iFAAc;AAClB,IAAI,iFAAc;AAClB,IAAI,wFAAqB,CAAC,6EAAU;AACpC;;AAEA;AACA,IAAI,oFAAiB;AACrB;AACA;AACA;AACA,IAAI,sFAAc;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,C;;;;;;;;;;;;;;;ACpCoH;;AAEpH;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,oFAAiB;AACrB,IAAI,oFAAiB;AACrB;;AAEA;AACA,IAAI,oFAAiB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI,4FAAyB;AAC7B;;AAEA;AACA;AACA,QAAQ,yFAAsB;AAC9B,QAAQ,4FAAyB;AACjC,QAAQ,yFAAsB;AAC9B,QAAQ,4FAAyB;AACjC,QAAQ,4FAAyB;AACjC,KAAK;AACL,QAAQ,4FAAyB;AACjC,QAAQ,yFAAsB;AAC9B,QAAQ,yFAAsB;AAC9B,QAAQ,4FAAyB;AACjC,QAAQ,4FAAyB;AACjC;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;;;;ACrDkF;AACM;AAC3B;AACA;AACe;;AAErE;AACP,IAAI,4FAAyB;AAC7B,IAAI,4FAAyB;AAC7B;;AAEA;AACA;AACA;AACA,QAAQ,yEAAmB;AAC3B;AACA,KAAK;AACL,QAAQ,yEAAmB;AAC3B;AACA;AACA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC3BoF;AACqC;AACjB;AACA;AACA;AACjG;AACA;AACP;AACA;AACA,IAAI,8FAA2B;AAC/B,IAAI,+FAA4B;AAChC;AACA,IAAI,kFAAU;AACd;;AAEO;AACP,mBAAmB,kFAAe;AAClC,kBAAkB,kFAAe;AACjC;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP,IAAI,gFAAmB;AACvB;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,uFAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,0FAAuB;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,sIAAmE;AAC3E,KAAK;AACL;AACA;;AAEA,QAAQ,sIAAmE;AAC3E;AACA;AACA;;AAEO;AACP;AACA;;AAEA,0BAA0B,iFAAc;AACxC;AACA;;AAEA;AACA,QAAQ,qHAAuC;AAC/C,KAAK;AACL,QAAQ,qHAAuC;AAC/C;AACA,C;;;;;;;;;;;;;;;;;;;AC3FqE;;AAErE;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP,mBAAmB,mGAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mGAAgC;AACnD;AACA;AACA,iBAAiB,oFAAiB;AAClC,gBAAgB,mFAAgB;AAChC;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP,mBAAmB,mGAAgC;AACnD;AACA;AACA;AACA;AACA,iBAAiB,oFAAiB;AAClC,gBAAgB,mFAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,oFAAiB;AAClC,gBAAgB,mFAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,C;;;;;;;;;;;;;;;;;;;ACzGwH;AACtC;AACgC;AACW;AACtH;;AAEP;AACA,IAAI,+FAAmC;AACvC;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,QAAQ,iFAA2B;;AAEnC;AACA;AACA,4BAA4B,+EAAyB;AACrD,YAAY,kFAA4B;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;;AAEA,mBAAmB,yEAAY;AAC/B,2BAA2B,mFAAsB;AACjD;AACA;AACA,IAAI,0FAA4B;;AAEhC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,C;;;;;;;;;;;;;;;;;;;AClDwH;AAChC;AAC0B;AACW;AACtH;;AAEP;AACA;AACA;AACA;AACA,QAAQ,iFAA2B;;AAEnC;AACA;AACA,4BAA4B,+EAAyB;AACrD,YAAY,kFAA4B;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,IAAI,gGAAmC;AACvC;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP,mC;;AAEA,mBAAmB,yEAAY;AAC/B,2BAA2B,mFAAsB;AACjD;AACA;AACA,IAAI,0FAA4B;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDmI;AAC3D;AACiI;AACvH;;AAElF;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,IAAI,oFAAiB;AACrB;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA,IAAI,iEAAsB;AAC1B,IAAI,sEAA2B;AAC/B;;AAEA;AACA,IAAI,uFAAoB;AACxB,IAAI,uFAAoB;AACxB;;AAEA;AACA,eAAe,uFAAoB;AACnC;AACA;AACA,KAAK;AACL;;AAEA;AACA,eAAe,uFAAoB;AACnC;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,IAAI,6FAA0B;AAC9B;;AAEA;AACA,IAAI,qFAAqB;AACzB;;AAEA;AACA,IAAI,0FAAuB;AAC3B;AACA;AACA;AACA;;AAEA;AACA,IAAI,0FAAuB;AAC3B,IAAI,yFAAsB;AAC1B;;AAEA;AACA;AACA,IAAI,iFAAoB;AACxB;;AAEO;AACP;AACA;AACA;;AAEO;AACP,IAAI,0FAAuB;AAC3B,IAAI,4FAAyB;AAC7B;;AAEO;AACP,IAAI,6FAA0B;AAC9B,IAAI,+FAA4B;AAChC;;AAEO;AACP,IAAI,gGAA6B;AACjC;;AAEO;AACP,IAAI,mGAAgC;AACpC;;AAEO;AACP,IAAI,4FAAyB;AAC7B;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oFAAiB;AAC7B;AACA,YAAY,wFAAqB;AACjC;AACA;AACA,gBAAgB,oFAAiB;AACjC,4CAA4C;AAC5C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;;;;;;;;AC/MA;AACkD;AACA;;AAE3C;AACP;AACA;AACA,sDAAsD,WAAW;AACjE;;AAEO;AACP;AACA;AACA;AACA,UAAU,uBAAuB;AACjC;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEO;AACP,WAAW,0DAAI;AACf;;AAEO;AACA;AACA;AACP,yBAAyB;;AAEzB,uBAAuB,SAAS;AAChC,sBAAsB,UAAU;AAChC,mBAAmB;AACnB,C;;;;;;;;;;;;;;;;;;;;;;;;AC/DoF;;AAEpF;AACA;;AAEA;AACA;;AAEA;AACA;;AAEO;AACP,OAAO,yFAAU;AACjB;AACA;AACA;AACA;AACA;;AAEO;AACP,mBAAmB,+GAAgC;AACnD;AACA;AACA,iBAAiB,gGAAiB;AAClC,gBAAgB,+FAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,mBAAmB,+GAAgC;AACnD;AACA;AACA,iBAAiB,gGAAiB;AAClC,gBAAgB,+FAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,mBAAmB,+GAAgC;AACnD;AACA;AACA,iBAAiB,gGAAiB;AAClC,gBAAgB,+FAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACpEgE;AACqG;;AAErK;AACA,cAAc,6DAAQ;AACtB;AACA,IAAI,4EAA4B;AAChC;AACA;;AAEA;AACA,cAAc,6DAAQ;AACtB;AACA,IAAI,4EAA4B;AAChC;AACA;;AAEA;AACA,cAAc,8DAAS;AACvB;AACA,IAAI,4EAA4B;AAChC;AACA;;AAEO;AACP;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;;;AC5BA;AACA;;AAEoF;AACpF;;AAEO;AACP,OAAO,yFAAU;AACjB,uBAAuB,+GAAgC;AACvD;AACA;AACA;AACA;AACA,qBAAqB,gGAAiB;AACtC,oBAAoB,+FAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,mBAAmB,+GAAgC;AACnD;AACA;AACA,iBAAiB,gGAAiB;AAClC,gBAAgB,+FAAgB;AAChC;AACA;AACA;AACA,oD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;AC/CA,WAAW,+BAA+B;AACiE;AAC3C;AAC6C;;AAE7G;AACA,mBAAmB,oEAAe;AAClC;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa,4EAA4B;AACzC;AACA;AACA;;AAEO;AACP;AACA;AACA,C;;;;;;;;;;;;;;;;UCvBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;;ACNgF;AAC9B;AAC4B;AACM;AACpF,WAAW,sBAAsB;AACjC,WAAW,iDAAiD;;;AAG5D,+DAAQ;AACR;AACA;AACA;AACA,6FAAqB,G","file":"main.js","sourcesContent":["import { coords_for_level_01 } from \"../../server_side/level_01/storingPositions\";\nimport { gamePanel, level, levelImage, timer } from \"../each_game_required_divs/requiredDivs\";\nimport { levelCountdown, show_hideOrShowButton } from \"../gamePlayLevelWise/requiredByEachLevel\";\nimport { necessaryCleanUpTasks } from \"./neededByAllLevels\";\n\nexport let level_one_game_view = () => {\n    // necessaryCleanUpTasks();\n    necessaryCleanUpTasks('01');\n    renderingLevelAndTimer('01', '02-00-00');\n    renderCharactersOnDisplay();\n    renderingLevelWorldImage();\n    show_hideOrShowButton();\n    coords_for_level_01();\n}\n\nlet renderingLevelWorldImage = () => {\n    // levelImage.src = '../../../dist/images/level-1.jpg' || './images/level-1.jpg';\n    levelImage.src = './images/level-1.jpg';\n    levelImage.alt = 'level 01';\n    gamePanel.appendChild(levelImage);\n}\n\nlet renderingLevelAndTimer = (levelNum, levelTimer) => {\n    level.textContent = levelNum;\n    timer.textContent = 'levelTimer';\n    levelCountdown(2);\n}\n\nlet renderCharactersOnDisplay = () => {\n    document.querySelectorAll('.characters-display img').forEach(node => {\n        if(node.id == 'waldo') {\n            node.style.display = 'block';\n        } else if(node.id == 'odlaw') {\n            node.style.display = 'block';\n        } else if(node.id == 'wizard') {\n            node.style.display = 'block';\n        }\n    })\n}","import { saving_coords_for_level02 } from \"../../server_side/level_02/storingPositions\";\nimport { gamePanel, level, levelImage, timer } from \"../each_game_required_divs/requiredDivs\";\nimport { levelCountdown, show_hideOrShowButton } from \"../gamePlayLevelWise/requiredByEachLevel\";\nimport { necessaryCleanUpTasks } from \"./neededByAllLevels\"\n\nexport let level_two_game_view = () => {\n    // necessaryCleanUpTasks();\n    necessaryCleanUpTasks('02');\n    renderingLevelAndTimer('02', '01-40-00');\n    renderCharactersOnDisplay();\n    renderingLevelWorldImage();\n    show_hideOrShowButton();\n    saving_coords_for_level02();\n}\n\nlet renderingLevelWorldImage = () => {\n    // levelImage.src = '../../../dist/images/level-2.png' || './images/level-2.png';\n    levelImage.src = './images/level-2.png';\n    levelImage.alt = 'level 02';\n    gamePanel.appendChild(levelImage);\n}\n\nlet renderingLevelAndTimer = (levelNum, levelTimer) => {\n    level.textContent = levelNum;\n    // timer.textContent = 'levelTimer';\n    // timer.remove();\n    // document.querySelectorAll('h4')[1].append(timer);\n    levelCountdown(1.40);\n}\n\nlet renderCharactersOnDisplay = () => {\n    document.querySelectorAll('.characters-display img').forEach(node => {\n        if(node.id == 'waldo') {\n            node.style.display = 'block';\n        }\n    });\n}","import { level, levelImage, level_01, level_02, timer, toggle_text } from \"../each_game_required_divs/requiredDivs\";\n\n// let renderingLevelWorldImage = (src, alt) => {\n//     levelImage.src = src;\n//     levelImage.alt = alt;\n//     gamePanel.appendChild(levelImage);\n// }\n\nlet removingLevelAndTimer = () => {\n    level.textContent = '';\n    timer.textContent = '';\n}\n\nlet removingLevelWorldImage = () => {\n    levelImage.remove();\n}\n\nlet removeCharactersFromDisplay = () => {\n    document.querySelectorAll('.characters-display img').forEach(node=> node.style.display = 'none');\n}\n\nlet removeOpacityFreomCharcters = () => {\n    document.querySelectorAll('.characters-display img').forEach(node=> node.classList.remove('character-found'));\n    // document.querySelectorAll('.characters-display img').forEach(node=> node.classList.contains('character-found') ? node.classList.remove('character-found') : false);\n}\n\nlet hide_showOrHideButton = () => {\n    toggle_text.style.display = 'none';\n}\n\nlet makeOtherLevelsUnclickable = (level) => {\n    if(level == '01') {\n        level_02.classList.add('unclickable');\n        level_01.classList.remove('unclickable');\n        level_01.classList.add('just-unclickable');\n        level_02.classList.remove('just-unclickable');\n        level_02.classList.remove('clickable');\n    } else {\n        level_02.classList.remove('unclickable');\n        level_01.classList.add('unclickable');\n        level_02.classList.add('just-unclickable');\n        level_01.classList.remove('just-unclickable');\n        level_01.classList.remove('clickable');\n    }\n}\n\nexport let necessaryCleanUpTasks = (whichLevel) => {\n    removingLevelWorldImage();\n    removingLevelAndTimer();\n    removeCharactersFromDisplay();\n    removeOpacityFreomCharcters();\n    hide_showOrHideButton();\n    makeOtherLevelsUnclickable(whichLevel);\n}","import { coords_for_level_01 } from \"../../server_side/level_01/storingPositions\";\nimport { saving_coords_for_level02 } from \"../../server_side/level_02/storingPositions\";\nimport { level_one_game_view } from \"../all_levels/level_01\";\nimport { level_two_game_view } from \"../all_levels/level_02\";\nimport { level_01, level_02 } from \"../each_game_required_divs/requiredDivs\"\n\nexport let awaitsUserChooseLevel = () => {\n    level_01.addEventListener('click',userHasSelectedLevel);\n    level_02.addEventListener('click', userHasSelectedLevel);\n}\n\nlet userHasSelectedLevel = evt => {\n    let id = evt.target.id;\n    if(id == 'level-01') {\n        level_one_game_view();\n        // coords_for_level_01();\n    } else if(id == 'level-02') {\n        level_two_game_view();\n        // saving_coords_for_level02();\n    }\n}","let waldo = document.querySelector('#waldo');\nlet odlaw = document.querySelector('#odlaw');\nlet wizard = document.querySelector('#wizard');\nlet wilma = document.querySelector('#wilma');\nlet wenda = document.querySelector('#wenda');\n\nlet level = document.querySelector('#level');\nlet timer = document.querySelector('#timer');\nlet levelImage = document.querySelector('#level-image');\nlet gamePanel = document.querySelector('.game-panel');\n\nlet level_01 = document.querySelector('#level-01');\nlet level_02 = document.querySelector('#level-02');\n\nlet resultText = document.querySelector('.result-text');\nlet resultDiv = document.querySelector('.level-result');\nlet playAgain = document.querySelector('#play-again');\nlet toggle_text = document.querySelector('#toggle-text');\nlet charactersDisplayed = document.querySelector('.characters-display');\nlet highScores = document.querySelector('.high-scores');\n\nlet chooseLevel = document.querySelector('.choose-levels');\nlet headerDiv = document.querySelector('.levels-header');\nlet scoresContainer = document.querySelector('.keeping-scores');\nlet scoresText = document.querySelector('.scores');\nlet minSpan = document.querySelector('#min');\nlet secSpan = document.querySelector('#sec');\nlet milliSpan = document.querySelector('#mil');\nexport {waldo, odlaw, wizard, wilma, wenda, level, timer, levelImage, gamePanel, level_01, level_02, resultDiv, resultText, playAgain, toggle_text, charactersDisplayed, highScores, chooseLevel, headerDiv, scoresContainer, scoresText, minSpan, secSpan, milliSpan}","import { readEachLevelResult, test2, testData } from \"../server_side/accessingData\";\nimport { charactersDisplayed, highScores, level, levelImage, toggle_text } from \"./each_game_required_divs/requiredDivs\";\nimport { checkPositionWithFirebaseForGameLevel01 } from \"./gamePlayLevelWise/level_01_gamePlay_control\";\nimport { checkPositionWithFirebaseForGameLevel02 } from \"./gamePlayLevelWise/level_02_gamePlay_control\";\nimport { hideScores, movingDivsFromDisplayToShowScores } from \"./gamePlayLevelWise/requiredByEachLevel\";\nexport let results = {};\nexport let gamePlay = () => {\n    // let worldImage = document.querySelector('.game-panel');\n    // worldImage.addEventListener('click', checkWhichLevelIsInPlay);\n    levelImage.addEventListener('click', checkWhichLevelIsInPlay);\n    toggle_text.addEventListener('click', toggleTextInDisplay);\n    initialToogleTextDisplay();\n    hideScores();\n}\n\nexport let removePreviousScoresDetails = () => {\n    for(let idx in highScores.rows) {\n        let row = highScores.rows[idx];\n        if(idx >=1) {\n            row.remove();\n        }\n    }\n}\n\nexport let showLevelHighestScores = (level, name) => {\n    // removing previously placed data from DOM\n    removePreviousScoresDetails();\n\n    // re rendering table data\n    // setTimeout(()=>showDataInHighScoresTable(level, name), 2000);\n    setTimeout(()=>showDataOnTable(level, name), 1001);\n}\n\nexport let showDataOnTable = (level, name) => {\n    readEachLevelResult(level,  name).then(data=> {\n        bringOutMaxFourFromResults(data);\n    })\n}\n\nlet bringOutMaxFourFromResults = data=> {\n    let maxFour = Object.entries(data).sort(([a,b], [c,d]) => b.time - d.time ).slice(0,4);\n    let sortedFour = maxFour.sort(([,a],[,b])=>b.time-a.time);\n    addingDatasOntoTable(Object.fromEntries(sortedFour));\n}\n\nlet addingDatasOntoTable = (datas) => {\n    // console.log('results', datas);\n    for(let key in datas) {\n        let row = highScores.insertRow(1);\n        let nameCell = row.insertCell(0);\n        let timeCell = row.insertCell(1);\n        let starsCell = row.insertCell(2);\n        nameCell.innerHTML = key;\n        timeCell.innerHTML = (datas[key].time.toFixed(2))+' sec';\n        starsCell.innerHTML = datas[key].stars;\n    }\n}\n\nlet initialToogleTextDisplay = () => {\n    toggle_text.textContent = \"Hide Characters\";\n}\n\nlet toggleTextInDisplay = evt => {\n    if(evt.target.classList.contains('show')) {\n        evt.target.parentNode.style.marginLeft = '-10.91%';\n        evt.target.textContent = \"Hide Characters\";\n\n        evt.target.classList.remove('show');\n        charactersDisplayed.parentNode.firstChild.nextSibling.style.display = 'flex';\n    } else {\n        evt.target.classList.add('show');\n        evt.target.textContent = \"Show Characters\";\n\n        charactersDisplayed.parentNode.firstChild.nextSibling.style.display = 'none';\n        evt.target.parentNode.style.marginLeft = '150%';\n    }\n}\n\nexport let checkWhichLevelIsInPlay = evt => {\n    let x = evt.clientX;\n    let y = evt.clientY;\n\n    let imageAltTagText = levelImage.alt;\n    let levelID = imageAltTagText.split(' ')[1];\n    console.log(levelID);\n\n    if(levelID == '01') {\n        checkPositionWithFirebaseForGameLevel01([x,y]);\n    } else if(levelID == '02') {\n        checkPositionWithFirebaseForGameLevel02([x,y]);\n    }\n}","import { levelImage } from \"../each_game_required_divs/requiredDivs\";\n\nlet value = '';\nexport let  charactersDD = () => {\n    let dropDownMarkUp = document.createElement('select');\n    let option = document.createElement('option');\n    option.value=null;\n    option.text='choose';\n    dropDownMarkUp.append(option);\n    let charactersAreInDisplay = document.querySelector('.characters-display').children;\n    Array.from(charactersAreInDisplay).forEach(character => {\n        let option = document.createElement('option');\n        // console.log(character)\n        if(character.style.display != 'none') {\n            option.value = character.alt;\n            option.textContent = character.alt;\n            dropDownMarkUp.append(option);\n        }\n    });\n    dropDownMarkUp.classList.add('found-who')\n    return dropDownMarkUp;\n}\n\nexport let adjustDropDownPosition = coords => {\n    let elemRect = levelImage.getBoundingClientRect();\n    let left = elemRect.left;\n    let top = elemRect.top;\n    // let height = levelImage.height;\n    // let width = levelImage.width;\n    // let yCoord = (top+(height*36)/100).toFixed(2);\n    // let xCoord = (left+(width*49)/100).toFixed(2);\n    // console.log(yCoord, '??', (top+(height*37.8)/100).toFixed(2));\n    // console.log(xCoord, \"!!\", (left+(width*50.19)/100).toFixed(2) )\n    // console.log(elemRect.x, elemRect.y, elemRect.height, elemRect.width, levelImage.height, elemRect.height+((levelImage.height*20)/100) );\n    // console.log(window.scrollX, window.scrollY)\n    // console.log(((elemRect.height*20)/100)+elemRect.height, elemRect.height)\n\n    tryingCoords();\n    tryingCoordsWithRect();\n\n    return {\n        left: coords[0]-left,\n        top: coords[1]-top\n    }\n}\n\nlet tryingCoordsWithRect = () => {\n    let elemRect = levelImage.getBoundingClientRect();\n    let left = elemRect.left;\n    let top = elemRect.top;\n    let height = levelImage.height;\n    let width = levelImage.width;\n    let yCoord = (top+(height*36)/100).toFixed(2);\n    let xCoord = (left+(width*49)/100).toFixed(2);\n    console.log('l', left, 't', top, 'w', width, 'h', height)\n    console.log(yCoord, '??', (top+(height*37.8)/100).toFixed(2));\n    console.log(xCoord, \"!!\", (left+(width*50.19)/100).toFixed(2));\n    \n}\n\nexport let tryingCoordsWithRectVer02 = () => {\n    let elemRect = levelImage.getBoundingClientRect();\n    let left = elemRect.left;\n    // let top = elemRect.top;\n    // let top = window.scrollY;\n    let top = elemRect.y;\n    let height = levelImage.height;\n    let width = levelImage.width;\n    let yCoord = (top+(height*36)/100).toFixed(2);\n    let ycEnd = (top+(height*37.8)/100).toFixed(2);\n    let xCoord = (left+(width*49)/100).toFixed(2);\n    let xcEnd = (left+(width*50.19)/100).toFixed(2);\n    console.log('l', left, 't', top, 'w', width, 'h', height)\n    console.log(yCoord, '??', (top+(height*37.8)/100).toFixed(2));\n    console.log(xCoord, \"!!\", (left+(width*50.19)/100).toFixed(2));\n    return [xCoord, xcEnd, yCoord, ycEnd]\n}\n\nlet tryingCoords = () => {\n    let left = window.scrollX;\n    let top = window.scrollY;\n    let height = levelImage.height;\n    let width = levelImage.width;\n    console.log('l', left, 't', top, 'w', width, 'h', height)\n    let yCoord = (top+(height*24.2)/100).toFixed(2);\n    let xCoord = (left+(width*67.2)/100).toFixed(2);\n    console.log(yCoord, '??', (top+(height*25.8)/100).toFixed(2));\n    console.log(xCoord, \"!!\", (left+(width*68)/100).toFixed(2) )\n}\n\nexport let stickDropDownWhereItsClicked = (dropDown, coords) => {\n    dropDown.setAttribute('style', 'color: green');\n    dropDown.style.left = coords[0]+'px';\n    dropDown.style.top = coords[1]+'px';\n    dropDown.style.position = 'absolute';\n    if(dropDown.length > 1) document.querySelector('.game-panel').append(dropDown);\n}\n\nexport let whichOptionWasSelected = () => {\n    let select = document.querySelector('.found-who');\n    select.addEventListener('change', (evt)=> {\n        value = select.value;\n        select.remove();\n        return value;\n    });\n}","import { readCharacterCoordsDataFromArray, readCharacterCoordsDataFromFirebase } from \"../../server_side/accessingData\";\nimport { coords_for_level_01 } from \"../../server_side/level_01/storingPositions\";\nimport { adjustDropDownPosition, charactersDD, stickDropDownWhereItsClicked } from \"./characterSelectionDropDown\";\nimport { calculateTotalTimeElapsed, decideEffeciencyFindingWaldo, disableCharacterFromDisplay } from \"./requiredByEachLevel\";\nexport let howManyCharactersExistInLevelOne = 3;\n\nlet checkWhoWithFirebase = (collectionName, characterName, coords) => {\n    readCharacterCoordsDataFromFirebase(collectionName, characterName).then(data=>{\n        // console.log(data, 'data read!!');\n        let characterData = data;\n        checkIfCoordsWithinPositionRange(characterData, coords, characterName);\n    }).catch(err=>console.log(\"could not read data!!\", err));\n}\n\nlet checkIfCoordsWithinPositionRange = (data, coords, who) => {\n    console.log(data['X'][0], data.X[1], who);\n    if((coords[0] >= data['X'][0] && coords[0] <= data['X'][1]) && (coords[1] >= data['Y'][0] && coords[1] <= data['Y'][1])) {\n        console.log('found!!'+who, data['X'][0], data['X'][1]);\n        disableCharacterFromDisplay(who)\n\n        howManyCharactersExistInLevelOne--;\n        if(howManyCharactersExistInLevelOne == 0) {\n            let timeSpent = calculateTotalTimeElapsed();\n            decideEffeciencyFindingWaldo(timeSpent, 'level_01');\n            // moving it back to it's initial value, so that when play again is in motion it starts from initial count\n            howManyCharactersExistInLevelOne = 3;\n        }\n    } else {\n        console.log('go fish!!'+who, coords);\n    }\n}\n\nexport let checkPositionWithFirebaseForGameLevel01 = (coords) => {\n    // coords_for_level_01();\n\n    let dropDown = charactersDD();\n    let positionAdjusted = adjustDropDownPosition(coords);\n    let newCoordsForDropdown = [positionAdjusted.left, positionAdjusted.top]\n    // stickDropDownWhereItsClicked(dropDown, coords);\n    stickDropDownWhereItsClicked(dropDown, newCoordsForDropdown);\n\n    let select = document.querySelector('.found-who');\n\n    if(select) {\n        select.addEventListener('change', ()=>{\n            let who = select.value;\n            checkWhoWithFirebase('level_01', who, coords);\n            document.querySelectorAll('select').forEach(node=>node.parentNode.removeChild(node));\n        });\n    }\n}","import { readCharacterCoordsDataFromArray, readCharacterCoordsDataFromFirebase } from \"../../server_side/accessingData\";\nimport { saving_coords_for_level02 } from \"../../server_side/level_02/storingPositions\";\nimport { adjustDropDownPosition, charactersDD, stickDropDownWhereItsClicked } from \"./characterSelectionDropDown\";\nimport { calculateTotalTimeElapsed, decideEffeciencyFindingWaldo, disableCharacterFromDisplay } from \"./requiredByEachLevel\";\nexport let howManyCharactersExistInLevelTwo = 1;\n\nlet checkIfCoordsWithinPositionRange = (data, coords, who) => {\n    console.log(data['X'][0], data.X[1], who);\n    if((coords[0] >= data['X'][0] && coords[0] <= data['X'][1]) && (coords[1] >= data['Y'][0] && coords[1] <= data['Y'][1])) {\n        console.log('found!!'+who, data['X'][0], data['X'][1]);\n        disableCharacterFromDisplay(who);\n\n        howManyCharactersExistInLevelTwo--;\n        if(howManyCharactersExistInLevelTwo == 0) {\n            let timeSpent = calculateTotalTimeElapsed();\n            decideEffeciencyFindingWaldo(timeSpent, \"level_02\");\n            // moving it back to it's initial value, so that when play again is in motion it starts from initial count\n            howManyCharactersExistInLevelTwo = 1;\n        }\n    } else {\n        console.log('go fish!!'+who, coords);\n    }\n}\n\nlet checkWhoWithFirebase = (collectionName, characterName, coords) => {\n    readCharacterCoordsDataFromFirebase(collectionName, characterName).then(data=>{\n        console.log(data, 'data read!!');\n        let characterData = data;\n        checkIfCoordsWithinPositionRange(characterData, coords, characterName);\n    }).catch(err=>console.log(\"could not read data!!\", err));\n}\n\nexport let checkPositionWithFirebaseForGameLevel02 = (coords) => {\n    // saving_coords_for_level02(); \n\n    let dropDown = charactersDD();\n    let positionAdjusted = adjustDropDownPosition(coords);\n    let newCoordsForDropdown = [positionAdjusted.left, positionAdjusted.top]\n    // stickDropDownWhereItsClicked(dropDown, coords);\n    stickDropDownWhereItsClicked(dropDown, newCoordsForDropdown);\n    \n    let select = document.querySelector('.found-who');\n    if(select) {\n        select.addEventListener('change', ()=>{\n            let who = select.value;\n            checkWhoWithFirebase('level_02', who, coords);\n            document.querySelectorAll('select').forEach(node=>node.parentNode.removeChild(node));\n        });\n    }\n}","import { readCharacterCoordsDataFromFirebase, storeEachLevelResult, storeResultsInLocally } from \"../../server_side/accessingData\";\nimport { necessaryCleanUpTasks } from \"../all_levels/neededByAllLevels\";\nimport { chooseLevel, headerDiv, level_01, level_02, milliSpan, minSpan, playAgain, resultDiv, resultText, scoresContainer, secSpan, timer, toggle_text } from \"../each_game_required_divs/requiredDivs\";\nimport { removePreviousScoresDetails, showLevelHighestScores } from \"../gamePlay\";\n\nlet timeStarted = Date.now();\nlet flag;\n\nexport let calculateTotalTimeElapsed = () => {\n    flag = false;\n    let timeElapsed = Date.now() - timeStarted;\n    let seconds = Math.floor(timeElapsed/1000);\n    let minutes = seconds / 60;\n    console.log(timeElapsed, Math.floor(timeElapsed/1000), minutes)\n    flag = true;\n    return minutes;\n}\n\nexport let decideEffeciencyFindingWaldo = (timeTook, level) => {\n    timer.textContent = '00:00:00';\n    let stars;\n    if(timeTook < .50) {\n        stars = '5 star';\n    } else if(timeTook >= .50 && timeTook < 1) {\n        stars = '4 star';\n    } else if(timeTook >= 1 && timeTook < 1.25) {\n        stars = '3 star';\n    } else {\n        stars = '2 star';\n    }\n    whatHappensAfterGame(stars, timeTook, level);\n    // flag = false;\n}\n\nexport let movingDivsFromDisplayToShowScores = (level, name) => {\n    emptyLevelAndTimerText();\n    showScores();\n    moveLevelsAndHeaderDivsToLeft();\n\n    showLevelHighestScores(level, name);\n    removePreviousScoresDetails();\n}\n\nlet emptyLevelAndTimerText = () => {\n    level_01.textContent = '00:00:00';\n    level_02.textContent = '00:00:00';\n}\n\nlet makingLevelsImagesUnclickable = () => {\n    Array.from(chooseLevel.children).forEach(node=>{\n        node.classList.add('unclickable');\n        node.classList.remove('clickable');\n    });\n}\n\nlet makingLevelsImagesClickable = () => {\n    Array.from(chooseLevel.children).forEach(node=>{\n        node.classList.remove('unclickable');\n        node.classList.add('clickable');\n        node.classList.remove('just-unclickable');\n    });\n}\n\nlet movingDivsFromDisplayToHideScores = () => {\n    hideScores();\n    moveLevelsAndHeaderDivsToCenter();\n}\n\nlet whatHappensAfterGame = (stars, time, level) => {\n    let name = prompt('please enter your name for leaderboard');\n\n    storeResultToFirebase(time,name,stars, level);\n\n    movingDivsFromDisplayToShowScores(level, name);\n\n    // flag = false;\n    // timer.textContent = '00' + ':'+ '00' +\":\"+'00';\n    // if(flag) {\n    //     timer.textContent = '00' + ':'+ '00' +\":\"+'00';\n    // }\n\n    setTimeout(() => {\n        makingLevelsImagesUnclickable();\n        announceCompleted(stars, name);\n        awaitsUsersPlayAgain();\n    }, 1001);\n}\n\nlet awaitsUsersPlayAgain = () => {\n    playAgain.addEventListener('click', gettingReadyForGame);\n}\n\nlet gettingReadyForGame = evt => {\n    necessaryCleanUpTasks();\n    movingDivsFromDisplayToHideScores();\n\n    document.querySelectorAll('select').forEach(node=>node.parentNode.removeChild(node));\n    resultDiv.style.display = 'none';\n    makingLevelsImagesClickable();\n    // timer resets well here, but to be precise need top find a better sweet spot\n    // flag = false;\n}\n\nlet announceCompleted = (stars, name) => {\n    resultDiv.style.display = 'block';\n    resultText.textContent = 'congratulations!! '+name+' you got '+stars+' :)';\n}\n\nlet storeResultToFirebase = (completionTime, name, stars, level) => {\n    // storeResultsInLocally(completionTime,name,stars, level);\n    storeEachLevelResult(completionTime, name, level, stars);\n}\n\nexport let disableCharacterFromDisplay = who => {\n    let charactersDisplayed = document.querySelector('.characters-display').children;\n    Array.from(charactersDisplayed).forEach(character => character.id == who ? character.classList.add('character-found') : false)\n}\n\nexport let moveLevelsAndHeaderDivsToLeft = () => {\n    headerDiv.classList.add('move-left');\n    chooseLevel.classList.add('move-left');\n}\n\nexport let moveLevelsAndHeaderDivsToCenter = () => {\n    headerDiv.classList.remove('move-left');\n    chooseLevel.classList.remove('move-left');\n}\n\nexport let hideScores = () => {\n    scoresContainer.classList.add('scores-hidden');\n}\n\nexport let showScores = () => {\n    scoresContainer.classList.remove('scores-hidden');\n}\n\nexport let show_hideOrShowButton = () => {\n    toggle_text.style.display = 'block';\n}\n\nexport let levelCountdown = timer => {\n    console.log(timer, 'here!!');\n    // time in milli seconds\n    let countDownTimerDeadline = timer * 60 * 1000;\n    // console.log(timer, countDownTimerDate);\n    let x = setInterval(() => {\n        \n        let timerDistance = countDownTimerDeadline - 1000;\n        countDownTimerDeadline = timerDistance;\n\n        let mins = Math.floor((timerDistance%(1000 * 60 * 60)) / (1000*60));\n        let secs = Math.floor((timerDistance%(1000 * 60)) / (1000));\n        // let millis = Math.floor((timerDistance/(1000)));\n        // let millis = Math.floor(((timerDistance/1000)%(1000)));\n        // let millis = Math.floor((timerDistance/(1000)));\n        // console.log(mins, secs, millis);\n        // displayTimerCountDown(mins, secs, millis);\n        // if(flag) clearTimeout(x);\n        // displayTimerCountDown(mins, secs);\n        if(flag) {\n            clearTimeout(x);\n            flag = false;\n            // countDownTimerDeadline = timer * 60 * 1000;\n        }\n        displayTimerCountDown(mins, secs);\n        // if(flag) alert('it is');\n               \n        if(timerDistance <= 0) {\n            clearInterval(x);\n        }\n    }, 1000)\n}\n\nlet displayTimerCountDown = (min,sec,mil) => {\n    // console.log(milliSpan)\n    // timer.textContent = '';\n\n    // console.log(min, sec, mil);\n    // timer.textContent = min + ':'+ sec +\":\"\n    if(flag) clearInterval(y);\n    let currentMillis = 0;\n        let y = setInterval(() => {\n            // if(flag) {\n            //     clearTimeout(y);\n            //     flag = false;\n            // }\n            currentMillis++;\n            // timer.textContent += currentMillis;\n            // milliSpan.textContent = currentMillis;\n            // timer.textContent = min + ':'+ sec +\":\"+currentMillis;\n            // timer.textContent = min + ':'+ sec +\":\"+currentMillis.length>1?currentMillis:'0'+currentMillis;\n            timer.textContent = min + ':'+ sec +\":\"+checkIfDoubleDigit();\n            // timer.textContent += checkIdDoubleDigit();\n            milliSpan.textContent = \"??\"\n            if(currentMillis >= 10) {\n                clearInterval(y);\n                timer.textContent = min + ':'+ sec +\":\"+'00';\n                console.log('millis .....');            }\n        }, 100)\n        let checkIfDoubleDigit = () => {\n            return currentMillis<10?'0'+currentMillis:currentMillis\n        }\n    // timer.textContent = min + ':'+ sec +\":\"+ mil\n    // minSpan.textContent = min;\n    // secSpan.textContent = sec;\n    // milliSpan.textContent = mil;\n    // timer.textContent = minSpan\n}","let db = firebase.firestore();\nimport { results } from \"../client_side/gamePlay\";\nimport data from \"./locallyStoredCoordsData.json\";\n\nexport let storeCharacterIntoFirestrore = (characterPos, whichLevel, characterName) => {\n    let [x,y] = [...characterPos];\n    console.log(x,y,'?!')\n    db.collection(whichLevel).doc(characterName).set({X: x, Y: y}).then(()=>console.log(characterName+' coords details saved!!')).catch(err=>console.log(\"something's wrong!!\", err));\n}\n\nexport let storeEachLevelResult = (time, name, level, stars) => {\n    db\n    .collection('results').doc(level)\n    .collection('results').doc(name)\n    .set({stars:stars, time:time})\n    .then(()=> console.log('result stored!!'))\n    .catch(err => console.log(\"error while storing result!!\", err));\n}\n\nexport let readEachLevelResult = (docName, whichCharacter) => {\n    let datas = {};\n    return db\n    .collection('results').doc(docName)\n    .collection('results')\n    .get().then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n            datas[doc.id] = doc.data();\n            // return doc.data(); \n        });\n        // console.log(datas, \"results?!\")\n        return datas;\n    }).then(data=>{\n        console.log(data, 'results');\n        // results = data;\n        return data;\n    }).catch(err => console.log('error!!', err));\n    // return datas;\n}\n\nexport let readCharacterCoordsDataFromFirebase = (collectionName, docName) => {\n    let coordsRanges = {}\n    return db.collection(collectionName).doc(docName)\n    .get().then(doc => {\n        coordsRanges.X = doc.data().X;\n        coordsRanges.Y = doc.data().Y;\n        // console.log('data loaded', doc.data(), doc.data().X, coordsRanges);\n        console.log('data loaded');\n        return coordsRanges;\n    }).catch(err => console.log(\"data couldn't be loaded!!\", err));\n}\n\nexport let readCharacterCoordsDataFromArray = (collectionName, docName) => {\n    return data;\n}\n\nexport let testData = {}\nexport let test2 = {};\nexport let storeResultsInLocally = (time,name,stars, level) => {\n    // testData[name] = {time, stars, level}\n\n    // test2[level] = {[name]: {time, stars}}\n    // test2[name] = {[level]: {time, stars}}\n    test2[name] = {time, stars, level}\n}","import { levelImage } from \"../../client_side/each_game_required_divs/requiredDivs\";\n\nlet waldosRangeOfX = [200, 204];\nlet waldosRangeOfY = [234, 244];\n\nlet wizardRangeOfX = [234, 238];\nlet wizardRangeOfY = [240, 251];\n\nlet odlawsRangeOfX = [99, 103];\nlet odlawsRangeOfY = [235, 246];\n\nexport let calculateCoords = () => {\n    if(levelImage) {\n        let waPos = forWaldo();\n        // let odPos = forOdlaw();\n        // let wiPos = forWizard();\n    }\n}\n\nexport let forWaldo = () => {\n    let elemRect = levelImage.getBoundingClientRect();\n    let left = elemRect.left;\n    let top = elemRect.top;\n    let height = levelImage.height;\n    let width = levelImage.width;\n    console.log('l', left, 't', top, 'w', width, 'h', height)\n    let yCoordStart = (top+(height*48.2)/100).toFixed(2);\n    let yCoordEnd = (top+(height*51.1)/100).toFixed(2);\n    let xCoordStart = (left+(width*52.45)/100).toFixed(2);\n    let xCoordEnd = (left+(width*54.29)/100).toFixed(2);\n    console.log(xCoordStart, xCoordEnd, yCoordStart, yCoordEnd, \"<>\")\n    let rangeOfX = [xCoordStart, xCoordEnd];\n    let rangeOfY = [yCoordStart, yCoordEnd];\n    return [rangeOfX, rangeOfY];\n}\n\nexport let forOdlaw = () => {\n    let elemRect = levelImage.getBoundingClientRect();\n    let left = elemRect.left;\n    let top = elemRect.top;\n    let height = levelImage.height;\n    let width = levelImage.width;\n    console.log('l', left, 't', top, 'w', width, 'h', height)\n    let yCoordStart = (top+(height*47.9)/100).toFixed(2);\n    let yCoordEnd = (top+(height*48.9)/100).toFixed(2);\n    let xCoordStart = (left+(width*23.25)/100).toFixed(2);\n    let xCoordEnd = (left+(width*25.29)/100).toFixed(2);\n    console.log(xCoordStart, xCoordEnd, yCoordStart, yCoordEnd, \"<>\")\n    let rangeOfX = [xCoordStart, xCoordEnd];\n    let rangeOfY = [yCoordStart, yCoordEnd];\n    return [rangeOfX, rangeOfY];\n}\n\nexport let forWizard = () => {\n    let elemRect = levelImage.getBoundingClientRect();\n    let left = elemRect.left;\n    let top = elemRect.top;\n    let height = levelImage.height;\n    let width = levelImage.width;\n    console.log('l', left, 't', top, 'w', width, 'h', height)\n    let yCoordStart = (top+(height*47.65)/100).toFixed(2);\n    let yCoordEnd = (top+(height*49.1)/100).toFixed(2);\n    let xCoordStart = (left+(width*60.45)/100).toFixed(2);\n    let xCoordEnd = (left+(width*62.99)/100).toFixed(2);\n    console.log(xCoordStart, xCoordEnd, yCoordStart, yCoordEnd, \"<>\")\n    let rangeOfX = [xCoordStart, xCoordEnd];\n    let rangeOfY = [yCoordStart, yCoordEnd];\n    return [rangeOfX, rangeOfY];\n}\n\nexport {waldosRangeOfX, waldosRangeOfY, odlawsRangeOfX, odlawsRangeOfY, wizardRangeOfX, wizardRangeOfY}","import { storeCharacterIntoFirestrore } from \"../accessingData\";\nimport { forOdlaw, forWaldo, forWizard, odlawsRangeOfX, odlawsRangeOfY, waldosRangeOfX, waldosRangeOfY, wizardRangeOfX, wizardRangeOfY } from \"./characterPositions\";\n\nlet waldosPosition = () => {\n    let pos = forWaldo();\n    let [x,y] = [...pos];\n    storeCharacterIntoFirestrore([x,y], 'level_01', 'waldo');\n    // storeCharacterIntoFirestrore([waldosRangeOfX, waldosRangeOfY], 'level_01', 'waldo');\n}\n\nlet odlawsPosition = () => {\n    let pos = forOdlaw();\n    let [x,y] = [...pos];\n    storeCharacterIntoFirestrore([x,y], 'level_01', 'odlaw');\n    // storeCharacterIntoFirestrore([odlawsRangeOfX, odlawsRangeOfY], 'level_01', 'odlaw');\n}\n\nlet wizardsPosition = () => {\n    let pos = forWizard();\n    let [x,y] = [...pos];\n    storeCharacterIntoFirestrore([x,y], 'level_01', 'wizard');\n    // storeCharacterIntoFirestrore([wizardRangeOfX, wizardRangeOfY], 'level_01', 'wizard');\n}\n\nexport let coords_for_level_01 = () => {\n    waldosPosition();\n    odlawsPosition();\n    wizardsPosition();\n}","// let waldosRangeOfX = [383, 387];\n// let waldosRangeOfY = [33, 42];\n\nimport { levelImage } from \"../../client_side/each_game_required_divs/requiredDivs\";\nlet xCoordStart, xCoordEnd, yCoordStart, yCoordEnd;\n\nexport let calculateCoords = () => {\n    if(levelImage) {\n        let elemRect = levelImage.getBoundingClientRect();\n        let left = elemRect.left;\n        // let top = elemRect.top;\n        // let top = window.scrollY - elemRect.top;\n        let top = elemRect.top - window.scrollY;\n        let height = levelImage.height;\n        let width = levelImage.width;\n        console.log('l', left, 't', top, 'w', width, 'h', height)\n        yCoordStart = (top+(height*35.5)/100).toFixed(2);\n        yCoordEnd = (top+(height*37.8)/100).toFixed(2);\n        xCoordStart = (left+(width*48.6)/100).toFixed(2);\n        xCoordEnd = (left+(width*50.19)/100).toFixed(2);\n        console.log(xCoordStart, xCoordEnd, yCoordStart, yCoordEnd, \"<>\")\n        let waldosRangeOfX = [xCoordStart, xCoordEnd];\n        let waldosRangeOfY = [yCoordStart, yCoordEnd];\n        return [waldosRangeOfX, waldosRangeOfY];\n    }\n}\n\nexport let calculateCoordsVer02 = () => {\n    let elemRect = levelImage.getBoundingClientRect();\n    let left = elemRect.left;\n    let top = elemRect.top;\n    let height = levelImage.height;\n    let width = levelImage.width;\n    yCoordStart = (top+(height*36)/100).toFixed(2);\n    yCoordEnd = (top+(height*37.8)/100).toFixed(2);\n    xCoordStart = (left+(width*49)/100).toFixed(2);\n    xCoordEnd = (left+(width*50.19)/100).toFixed(2);  \n}\n// console.log('l', left, 't', top, 'w', width, 'h', height)\n// console.log(yCoord, '??', (top+(height*37.8)/100).toFixed(2));\n// console.log(xCoord, \"!!\", (left+(width*50.19)/100).toFixed(2) )\n// console.log(xCoordStart, xCoordEnd, yCoordStart, yCoordEnd)\n\nlet waldosRangeOfX = [xCoordStart=0, xCoordEnd=0];\nlet waldosRangeOfY = [yCoordStart=0, yCoordEnd=0];\n\n// let waldosRangeOfX = [186, 189];\n// let waldosRangeOfY = [203, 209];\n\nexport {waldosRangeOfX, waldosRangeOfY}","// import { storeCharacterIntoFirestrore } from \"../accessingData\";\nimport { tryingCoordsWithRectVer02 } from \"../../client_side/gamePlayLevelWise/characterSelectionDropDown\";\nimport { storeCharacterIntoFirestrore } from \"../accessingData\";\nimport { calculateCoords, calculateCoordsVer02, waldosRangeOfX, waldosRangeOfY } from \"./characterPositions\";\n\nlet waldosPosition = (level) => {\n    let posRange = calculateCoords();\n    let [x,y] = [...posRange];\n    console.log(x,y, \"watwat?!\")\n    \n    // let allCoords = tryingCoordsWithRectVer02();\n    // let x = [allCoords[0], allCoords[1]];\n    // let y = [allCoords[2], allCoords[3]];\n    // console.log([allCoords[0], allCoords[1]],[allCoords[2], allCoords[3]], \"watwat?!\")\n    \n    if(x&&y) storeCharacterIntoFirestrore([x, y], level, 'waldo');\n    // storeCharacterIntoFirestrore([waldosRangeOfX, waldosRangeOfY], level, 'waldo');\n    // storeCharacterIntoFirestrore([waldosRangeOfX=x, waldosRangeOfY=y], level, 'waldo');\n}\n\nexport let saving_coords_for_level02 = () => {\n    // calculateCoordsVer02();\n    waldosPosition('level_02');\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { awaitsUserChooseLevel } from \"./client_side/choose_level/renderLevels\";\nimport { gamePlay } from \"./client_side/gamePlay\";\nimport { coords_for_level_01 } from \"./server_side/level_01/storingPositions\";\nimport { saving_coords_for_level02 } from \"./server_side/level_02/storingPositions\";\n// import { coords_for_level_01 } from \"./server_side/savingPositions\";\n// import { coords_for_level_02, saving_coords_for_level02 } from \"./server_side/storingDataByLevels\";\n\n\ngamePlay();\n// coords_for_level_01();\n// saving_coords_for_level02();\n// coords_for_level_02();\nawaitsUserChooseLevel();"],"sourceRoot":""}